#
# qmake configuration common to OS X and iOS
#

!load(device_config): error(Could not successfully load device configuration)

QMAKE_PLATFORM         += mac darwin

MAKEFILE_GENERATOR      = UNIX
CONFIG                 += app_bundle incremental global_init_link_order lib_version_first sdk
QMAKE_INCREMENTAL_STYLE = sublib

include(unix.conf)

QMAKE_RESOURCE          = /Developer/Tools/Rez
QMAKE_EXTENSION_SHLIB   = dylib
QMAKE_EXTENSIONS_AUX_SHLIB = tbd
QMAKE_LIBDIR            =

# sdk.prf will prefix the proper SDK sysroot
QMAKE_INCDIR_OPENGL     = \
    /System/Library/Frameworks/OpenGL.framework/Headers \
    /System/Library/Frameworks/AGL.framework/Headers/

QMAKE_FIX_RPATH         = install_name_tool -id

QMAKE_LFLAGS_RPATH      = -Wl,-rpath,
QMAKE_LFLAGS_GCSECTIONS = -Wl,-dead_strip

QMAKE_LFLAGS_REL_RPATH  =
QMAKE_REL_RPATH_BASE    = @loader_path

QMAKE_LIBS_DYNLOAD      =
QMAKE_LIBS_OPENGL       = -framework OpenGL -framework AGL
QMAKE_LIBS_THREAD       =

QMAKE_INCDIR_WAYLAND    =
QMAKE_LIBS_WAYLAND_CLIENT = -lwayland-client
QMAKE_LIBS_WAYLAND_SERVER = -lwayland-server
QMAKE_LIBDIR_WAYLAND    =
QMAKE_DEFINES_WAYLAND   =
QMAKE_WAYLAND_SCANNER   = wayland-scanner

QMAKE_ACTOOL            = actool

QMAKE_DSYMUTIL          = dsymutil
QMAKE_STRIP             = $${CROSS_COMPILE}strip
QMAKE_STRIPFLAGS_LIB   += -S -x

QMAKE_AR                = $${CROSS_COMPILE}ar cq
QMAKE_RANLIB            = $${CROSS_COMPILE}ranlib -s
QMAKE_NM                = $${CROSS_COMPILE}nm -P

QMAKE_CFLAGS_RELEASE = $$QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO
QMAKE_CXXFLAGS_RELEASE = $$QMAKE_CXXFLAGS_RELEASE_WITH_DEBUGINFO
QMAKE_OBJECTIVE_CFLAGS_RELEASE = $$QMAKE_OBJECTIVE_CFLAGS_RELEASE_WITH_DEBUGINFO
QMAKE_LFLAGS_RELEASE = $$QMAKE_LFLAGS_RELEASE_WITH_DEBUGINFO

QMAKE_CFLAGS_DEBUG = $$QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO
QMAKE_CXXFLAGS_DEBUG = $$QMAKE_CXXFLAGS_RELEASE_WITH_DEBUGINFO
QMAKE_OBJECTIVE_CFLAGS_DEBUG = $$QMAKE_OBJECTIVE_CFLAGS_RELEASE_WITH_DEBUGINFO
QMAKE_LFLAGS_DEBUG = $$QMAKE_LFLAGS_RELEASE_WITH_DEBUGINFO
